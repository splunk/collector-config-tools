type: '*loadbalancingexporter.Config'
doc: |
  Config defines configuration for the exporter.
fields:
- name: protocol
  type: loadbalancingexporter.Protocol
  kind: struct
  doc: |
    Protocol holds the individual protocol-specific settings. Only OTLP is supported at the moment.
  fields:
  - name: otlp
    type: otlpexporter.Config
    kind: struct
    doc: |
      TimeoutSettings for timeout. The timeout applies to individual attempts to send data to the backend.
    fields:
    - name: timeout
      type: time.Duration
      kind: int64
      default: 5s
      doc: |
        Timeout is the timeout for every attempt to send data to the backend.
        A zero timeout means no timeout.
    - name: sending_queue
      type: exporterhelper.QueueSettings
      kind: struct
      doc: |
        QueueSettings defines configuration for queueing batches before sending to the consumerSender.
      fields:
      - name: enabled
        kind: bool
        default: true
        doc: |
          Enabled indicates whether to not enqueue batches before sending to the consumerSender.
      - name: num_consumers
        kind: int
        default: 10
        doc: |
          NumConsumers is the number of consumers from the queue. Defaults to 10.
          If batching is enabled, a combined batch cannot contain more requests than the number of consumers.
          So it's recommended to set higher number of consumers if batching is enabled.
      - name: queue_size
        kind: int
        default: 1000
        doc: |
          QueueSize is the maximum number of batches allowed in queue at a given time.
      - name: storage
        type: '*component.ID'
        kind: ptr
        doc: |
          StorageID if not empty, enables the persistent storage and uses the component specified
          as a storage extension for the persistent queue
    - name: retry_on_failure
      type: configretry.BackOffConfig
      kind: struct
      fields:
      - name: enabled
        kind: bool
        default: true
      - name: initial_interval
        type: time.Duration
        kind: int64
        default: 5s
      - name: randomization_factor
        kind: float64
      - name: multiplier
        kind: float64
      - name: max_interval
        type: time.Duration
        kind: int64
        default: 30s
      - name: max_elapsed_time
        type: time.Duration
        kind: int64
        default: 5m0s
    - name: batcher
      type: exporterbatcher.Config
      kind: struct
      doc: |
        Config defines a configuration for batching requests based on a timeout and a minimum number of items.
        MaxSizeItems defines batch splitting functionality if it's more than zero.
        Experimental: This API is at the early stage of development and may change without backward compatibility
        until https://github.com/open-telemetry/opentelemetry-collector/issues/8122 is resolved.
      fields:
      - name: enabled
        kind: bool
        default: false
        doc: |
          Enabled indicates whether to not enqueue batches before sending to the consumerSender.
      - name: flush_timeout
        type: time.Duration
        kind: int64
        default: 200ms
        doc: |
          FlushTimeout sets the time after which a batch will be sent regardless of its size.
      - name: min_size_items
        kind: int
        default: 8192
        doc: |
          MinSizeItems is the number of items (spans, data points or log records for OTLP) at which the batch should be
          sent regardless of the timeout. There is no guarantee that the batch size always greater than this value.
          This option requires the Request to implement RequestItemsCounter interface. Otherwise, it will be ignored.
      - name: max_size_items
        kind: int
        doc: |
          MaxSizeItems is the maximum number of the batch items, i.e. spans, data points or log records for OTLP.
          If the batch size exceeds this value, it will be broken up into smaller batches if possible.
          Setting this value to zero disables the maximum size limit.
    - name: endpoint
      kind: string
      default: placeholder:4317
    - name: compression
      type: configcompression.Type
      kind: string
      default: gzip
    - name: tls
      type: configtls.ClientConfig
      kind: struct
      doc: |
        ClientConfig contains TLS configurations that are specific to client
        connections in addition to the common configurations. This should be used by
        components configuring TLS client connections.
      fields:
      - name: ca_file
        kind: string
        default: ""
        doc: |
          Path to the CA cert. For a client this verifies the server certificate.
          For a server this verifies client certificates. If empty uses system root CA.
          (optional)
      - name: ca_pem
        type: configopaque.String
        kind: string
        default: ""
        doc: |
          In memory PEM encoded cert. (optional)
      - name: include_system_ca_certs_pool
        kind: bool
        default: false
        doc: |
          If true, load system CA certificates pool in addition to the certificates
          configured in this struct.
      - name: cert_file
        kind: string
        default: ""
        doc: |
          Path to the TLS cert to use for TLS required connections. (optional)
      - name: cert_pem
        type: configopaque.String
        kind: string
        default: ""
        doc: |
          In memory PEM encoded TLS cert to use for TLS required connections. (optional)
      - name: key_file
        kind: string
        default: ""
        doc: |
          Path to the TLS key to use for TLS required connections. (optional)
      - name: key_pem
        type: configopaque.String
        kind: string
        default: ""
        doc: |
          In memory PEM encoded TLS key to use for TLS required connections. (optional)
      - name: min_version
        kind: string
        default: ""
        doc: |
          MinVersion sets the minimum TLS version that is acceptable.
          If not set, TLS 1.2 will be used. (optional)
      - name: max_version
        kind: string
        default: ""
        doc: |
          MaxVersion sets the maximum TLS version that is acceptable.
          If not set, refer to crypto/tls for defaults. (optional)
      - name: cipher_suites
        type: '[]string'
        kind: slice
        doc: |
          CipherSuites is a list of TLS cipher suites that the TLS transport can use.
          If left blank, a safe default list is used.
          See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.
      - name: reload_interval
        type: time.Duration
        kind: int64
        doc: |
          ReloadInterval specifies the duration after which the certificate will be reloaded
          If not set, it will never be reloaded (optional)
      - name: insecure
        kind: bool
        default: false
        doc: |
          In gRPC and HTTP when set to true, this is used to disable the client transport security.
          See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC.
          Please refer to https://godoc.org/crypto/tls#Config for more information.
          (optional, default false)
      - name: insecure_skip_verify
        kind: bool
        default: false
        doc: |
          InsecureSkipVerify will enable TLS but not verify the certificate.
      - name: server_name_override
        kind: string
        default: ""
        doc: |
          ServerName requested by client for virtual hosting.
          This sets the ServerName in the TLSConfig. Please refer to
          https://godoc.org/crypto/tls#Config for more information. (optional)
    - name: keepalive
      type: '*configgrpc.KeepaliveClientConfig'
      kind: ptr
      fields:
      - name: time
        type: time.Duration
        kind: int64
      - name: timeout
        type: time.Duration
        kind: int64
      - name: permit_without_stream
        kind: bool
        default: false
    - name: read_buffer_size
      kind: int
    - name: write_buffer_size
      kind: int
      default: 524288
    - name: wait_for_ready
      kind: bool
      default: false
    - name: headers
      type: map[string]configopaque.String
      kind: map
    - name: balancer_name
      kind: string
      default: ""
    - name: authority
      kind: string
      default: ""
    - name: auth
      type: '*configauth.Authentication'
      kind: ptr
      fields:
      - name: authenticator
        type: component.ID
        kind: struct
        doc: |
          ID represents the identity for a component. It combines two values:
          * type - the Type of the component.
          * name - the name of that component.
          The component ID (combination type + name) is unique for a given component.Kind.
- name: resolver
  type: loadbalancingexporter.ResolverSettings
  kind: struct
  doc: |
    ResolverSettings defines the configurations for the backend resolver
  fields:
  - name: static
    type: '*loadbalancingexporter.StaticResolver'
    kind: ptr
    doc: |
      StaticResolver defines the configuration for the resolver providing a fixed list of backends
    fields:
    - name: hostnames
      type: '[]string'
      kind: slice
  - name: dns
    type: '*loadbalancingexporter.DNSResolver'
    kind: ptr
    doc: |
      DNSResolver defines the configuration for the DNS resolver
    fields:
    - name: hostname
      kind: string
      default: ""
    - name: port
      kind: string
      default: ""
    - name: interval
      type: time.Duration
      kind: int64
    - name: timeout
      type: time.Duration
      kind: int64
  - name: k8s
    type: '*loadbalancingexporter.K8sSvcResolver'
    kind: ptr
    doc: |
      K8sSvcResolver defines the configuration for the DNS resolver
    fields:
    - name: service
      kind: string
      default: ""
    - name: ports
      type: '[]int32'
      kind: slice
    - name: timeout
      type: time.Duration
      kind: int64
  - name: aws_cloud_map
    type: '*loadbalancingexporter.AWSCloudMapResolver'
    kind: ptr
    fields:
    - name: namespace
      kind: string
      default: ""
    - name: service_name
      kind: string
      default: ""
    - name: health_status
      type: types.HealthStatusFilter
      kind: string
      default: ""
    - name: interval
      type: time.Duration
      kind: int64
    - name: timeout
      type: time.Duration
      kind: int64
    - name: port
      type: '*uint16'
      kind: ptr
- name: routing_key
  kind: string
  default: ""
