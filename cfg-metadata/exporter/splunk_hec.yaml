type: '*splunkhecexporter.Config'
doc: |
  Config defines configuration for Splunk exporter.
fields:
- name: endpoint
  kind: string
  default: ""
- name: proxy_url
  kind: string
  default: ""
- name: tls
  type: configtls.ClientConfig
  kind: struct
  doc: |
    ClientConfig contains TLS configurations that are specific to client
    connections in addition to the common configurations. This should be used by
    components configuring TLS client connections.
  fields:
  - name: ca_file
    kind: string
    default: ""
    doc: |
      Path to the CA cert. For a client this verifies the server certificate.
      For a server this verifies client certificates. If empty uses system root CA.
      (optional)
  - name: ca_pem
    type: configopaque.String
    kind: string
    default: ""
    doc: |
      In memory PEM encoded cert. (optional)
  - name: include_system_ca_certs_pool
    kind: bool
    default: false
    doc: |
      If true, load system CA certificates pool in addition to the certificates
      configured in this struct.
  - name: cert_file
    kind: string
    default: ""
    doc: |
      Path to the TLS cert to use for TLS required connections. (optional)
  - name: cert_pem
    type: configopaque.String
    kind: string
    default: ""
    doc: |
      In memory PEM encoded TLS cert to use for TLS required connections. (optional)
  - name: key_file
    kind: string
    default: ""
    doc: |
      Path to the TLS key to use for TLS required connections. (optional)
  - name: key_pem
    type: configopaque.String
    kind: string
    default: ""
    doc: |
      In memory PEM encoded TLS key to use for TLS required connections. (optional)
  - name: min_version
    kind: string
    default: ""
    doc: |
      MinVersion sets the minimum TLS version that is acceptable.
      If not set, TLS 1.2 will be used. (optional)
  - name: max_version
    kind: string
    default: ""
    doc: |
      MaxVersion sets the maximum TLS version that is acceptable.
      If not set, refer to crypto/tls for defaults. (optional)
  - name: cipher_suites
    type: '[]string'
    kind: slice
    doc: |
      CipherSuites is a list of TLS cipher suites that the TLS transport can use.
      If left blank, a safe default list is used.
      See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.
  - name: reload_interval
    type: time.Duration
    kind: int64
    doc: |
      ReloadInterval specifies the duration after which the certificate will be reloaded
      If not set, it will never be reloaded (optional)
  - name: insecure
    kind: bool
    default: false
    doc: |
      In gRPC and HTTP when set to true, this is used to disable the client transport security.
      See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC.
      Please refer to https://godoc.org/crypto/tls#Config for more information.
      (optional, default false)
  - name: insecure_skip_verify
    kind: bool
    default: false
    doc: |
      InsecureSkipVerify will enable TLS but not verify the certificate.
  - name: server_name_override
    kind: string
    default: ""
    doc: |
      ServerName requested by client for virtual hosting.
      This sets the ServerName in the TLSConfig. Please refer to
      https://godoc.org/crypto/tls#Config for more information. (optional)
- name: read_buffer_size
  kind: int
- name: write_buffer_size
  kind: int
- name: timeout
  type: time.Duration
  kind: int64
  default: 10s
- name: headers
  type: map[string]configopaque.String
  kind: map
- name: auth
  type: '*configauth.Authentication'
  kind: ptr
  fields:
  - name: authenticator
    type: component.ID
    kind: struct
    doc: |
      ID represents the identity for a component. It combines two values:
      * type - the Type of the component.
      * name - the name of that component.
      The component ID (combination type + name) is unique for a given component.Kind.
- name: compression
  type: configcompression.Type
  kind: string
  default: ""
- name: max_idle_conns
  type: '*int'
  kind: ptr
- name: max_idle_conns_per_host
  type: '*int'
  kind: ptr
- name: max_conns_per_host
  type: '*int'
  kind: ptr
- name: idle_conn_timeout
  type: '*time.Duration'
  kind: ptr
- name: disable_keep_alives
  kind: bool
  default: false
- name: http2_read_idle_timeout
  type: time.Duration
  kind: int64
  default: 10s
- name: http2_ping_timeout
  type: time.Duration
  kind: int64
  default: 10s
- name: cookies
  type: '*confighttp.CookiesConfig'
  kind: ptr
  fields:
  - name: enabled
    kind: bool
    default: false
- name: sending_queue
  type: exporterhelper.QueueSettings
  kind: struct
  doc: |
    QueueSettings defines configuration for queueing batches before sending to the consumerSender.
  fields:
  - name: enabled
    kind: bool
    default: true
    doc: |
      Enabled indicates whether to not enqueue batches before sending to the consumerSender.
  - name: num_consumers
    kind: int
    default: 10
    doc: |
      NumConsumers is the number of consumers from the queue. Defaults to 10.
      If batching is enabled, a combined batch cannot contain more requests than the number of consumers.
      So it's recommended to set higher number of consumers if batching is enabled.
  - name: queue_size
    kind: int
    default: 1000
    doc: |
      QueueSize is the maximum number of batches allowed in queue at a given time.
  - name: storage
    type: '*component.ID'
    kind: ptr
    doc: |
      StorageID if not empty, enables the persistent storage and uses the component specified
      as a storage extension for the persistent queue
- name: retry_on_failure
  type: configretry.BackOffConfig
  kind: struct
  fields:
  - name: enabled
    kind: bool
    default: true
  - name: initial_interval
    type: time.Duration
    kind: int64
    default: 5s
  - name: randomization_factor
    kind: float64
  - name: multiplier
    kind: float64
  - name: max_interval
    type: time.Duration
    kind: int64
    default: 30s
  - name: max_elapsed_time
    type: time.Duration
    kind: int64
    default: 5m0s
- name: batcher
  type: exporterbatcher.Config
  kind: struct
  doc: |
    Experimental: This configuration is at the early stage of development and may change without backward compatibility
    until https://github.com/open-telemetry/opentelemetry-collector/issues/8122 is resolved.
  fields:
  - name: enabled
    kind: bool
    default: false
    doc: |
      Enabled indicates whether to not enqueue batches before sending to the consumerSender.
  - name: flush_timeout
    type: time.Duration
    kind: int64
    default: 200ms
    doc: |
      FlushTimeout sets the time after which a batch will be sent regardless of its size.
  - name: min_size_items
    kind: int
    default: 8192
    doc: |
      MinSizeItems is the number of items (spans, data points or log records for OTLP) at which the batch should be
      sent regardless of the timeout. There is no guarantee that the batch size always greater than this value.
      This option requires the Request to implement RequestItemsCounter interface. Otherwise, it will be ignored.
  - name: max_size_items
    kind: int
    doc: |
      MaxSizeItems is the maximum number of the batch items, i.e. spans, data points or log records for OTLP.
      If the batch size exceeds this value, it will be broken up into smaller batches if possible.
      Setting this value to zero disables the maximum size limit.
- name: log_data_enabled
  kind: bool
  default: true
  doc: |
    LogDataEnabled can be used to disable sending logs by the exporter.
- name: profiling_data_enabled
  kind: bool
  default: true
  doc: |
    ProfilingDataEnabled can be used to disable sending profiling data by the exporter.
- name: token
  type: configopaque.String
  kind: string
  default: ""
  doc: |
    HEC Token is the authentication token provided by Splunk: https://docs.splunk.com/Documentation/Splunk/latest/Data/UsetheHTTPEventCollector.
- name: source
  kind: string
  default: ""
  doc: |
    Optional Splunk source: https://docs.splunk.com/Splexicon:Source.
    Sources identify the incoming data.
- name: sourcetype
  kind: string
  default: ""
  doc: |
    Optional Splunk source type: https://docs.splunk.com/Splexicon:Sourcetype.
- name: index
  kind: string
  default: ""
  doc: |
    Splunk index, optional name of the Splunk index.
- name: disable_compression
  kind: bool
  default: false
  doc: |
    Disable GZip compression. Defaults to false.
- name: max_content_length_logs
  kind: uint
  default: 2097152
  doc: |
    Maximum log payload size in bytes. Default value is 2097152 bytes (2MiB).
    Maximum allowed value is 838860800 (~ 800 MB).
- name: max_content_length_metrics
  kind: uint
  default: 2097152
  doc: |
    Maximum metric payload size in bytes. Default value is 2097152 bytes (2MiB).
    Maximum allowed value is 838860800 (~ 800 MB).
- name: max_content_length_traces
  kind: uint
  default: 2097152
  doc: |
    Maximum trace payload size in bytes. Default value is 2097152 bytes (2MiB).
    Maximum allowed value is 838860800 (~ 800 MB).
- name: max_event_size
  kind: uint
  default: 5242880
  doc: |
    Maximum payload size, raw uncompressed. Default value is 5242880 bytes (5MiB).
    Maximum allowed value is 838860800 (~ 800 MB).
- name: splunk_app_name
  kind: string
  default: OpenTelemetry Collector Contrib
  doc: |
    App name is used to track telemetry information for Splunk App's using HEC by App name. Defaults to "OpenTelemetry Collector Contrib".
- name: splunk_app_version
  kind: string
  default: ""
  doc: |
    App version is used to track telemetry information for Splunk App's using HEC by App version. Defaults to the current OpenTelemetry Collector Contrib build version.
- name: hec_metadata_to_otel_attrs
  type: splunk.HecToOtelAttrs
  kind: struct
  doc: |
    HecToOtelAttrs creates a mapping from attributes to HEC specific metadata: source, sourcetype, index and host.
  fields:
  - name: source
    kind: string
    default: com.splunk.source
    doc: |
      Source indicates the mapping of the source field to a specific unified model attribute.
  - name: sourcetype
    kind: string
    default: com.splunk.sourcetype
    doc: |
      SourceType indicates the mapping of the sourcetype field to a specific unified model attribute.
  - name: index
    kind: string
    default: com.splunk.index
    doc: |
      Index indicates the mapping of the index field to a specific unified model attribute.
  - name: host
    kind: string
    default: host.name
    doc: |
      Host indicates the mapping of the host field to a specific unified model attribute.
- name: otel_to_hec_fields
  type: splunkhecexporter.OtelToHecFields
  kind: struct
  doc: |
    HecFields creates a mapping from attributes to HEC fields.
  fields:
  - name: severity_text
    kind: string
    default: otel.log.severity.text
    doc: |
      SeverityText informs the exporter to map the severity text field to a specific HEC field.
  - name: severity_number
    kind: string
    default: otel.log.severity.number
    doc: |
      SeverityNumber informs the exporter to map the severity number field to a specific HEC field.
- name: health_path
  kind: string
  default: /services/collector/health
  doc: |
    HealthPath for health API, default is '/services/collector/health'
- name: health_check_enabled
  kind: bool
  default: false
  doc: |
    HecHealthCheckEnabled can be used to verify Splunk HEC health on exporter's startup
- name: export_raw
  kind: bool
  default: false
  doc: |
    ExportRaw to send only the log's body, targeting a Splunk HEC raw endpoint.
- name: use_multi_metric_format
  kind: bool
  default: false
  doc: |
    UseMultiMetricFormat combines metric events to save space during ingestion.
- name: heartbeat
  type: splunkhecexporter.HecHeartbeat
  kind: struct
  doc: |
    Heartbeat is the configuration to enable heartbeat
  fields:
  - name: interval
    type: time.Duration
    kind: int64
    doc: |
      Interval represents the time interval for the heartbeat interval. If nothing or 0 is set,
      heartbeat is not enabled.
      A heartbeat is an event sent to _internal index with metadata for the current collector/host.
  - name: startup
    kind: bool
    default: false
    doc: |
      Startup is used to send heartbeat events on exporter's startup.
- name: telemetry
  type: splunkhecexporter.HecTelemetry
  kind: struct
  doc: |
    Telemetry is the configuration for splunk hec exporter telemetry
  fields:
  - name: enabled
    kind: bool
    default: false
    doc: |
      Enabled is the bool to enable telemetry inside splunk hec exporter
  - name: override_metrics_names
    type: map[string]string
    kind: map
    doc: |
      OverrideMetricsNames is the map to override metrics for internal metrics in splunk hec exporter
  - name: extra_attributes
    type: map[string]string
    kind: map
    doc: |
      ExtraAttributes is the extra attributes for metrics inside splunk hex exporter
