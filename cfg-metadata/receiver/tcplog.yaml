type: '*tcplogreceiver.TCPLogConfig'
doc: |
  TCPLogConfig defines configuration for the tcp receiver
fields:
- name: attributes
  type: map[string]helper.ExprStringConfig
  kind: map
- name: resource
  type: map[string]helper.ExprStringConfig
  kind: map
- name: id
  kind: string
  default: tcp_input
- name: type
  kind: string
  default: tcp_input
- name: output
  type: '[]string'
  kind: slice
- name: max_log_size
  type: helper.ByteSize
  kind: int64
- name: listen_address
  kind: string
  default: ""
- name: tls
  type: '*configtls.ServerConfig'
  kind: ptr
  doc: |
    ServerConfig contains TLS configurations that are specific to server
    connections in addition to the common configurations. This should be used by
    components configuring TLS server connections.
  fields:
  - name: ca_file
    kind: string
    default: ""
    doc: |
      Path to the CA cert. For a client this verifies the server certificate.
      For a server this verifies client certificates. If empty uses system root CA.
      (optional)
  - name: ca_pem
    type: configopaque.String
    kind: string
    default: ""
    doc: |
      In memory PEM encoded cert. (optional)
  - name: include_system_ca_certs_pool
    kind: bool
    default: false
    doc: |
      If true, load system CA certificates pool in addition to the certificates
      configured in this struct.
  - name: cert_file
    kind: string
    default: ""
    doc: |
      Path to the TLS cert to use for TLS required connections. (optional)
  - name: cert_pem
    type: configopaque.String
    kind: string
    default: ""
    doc: |
      In memory PEM encoded TLS cert to use for TLS required connections. (optional)
  - name: key_file
    kind: string
    default: ""
    doc: |
      Path to the TLS key to use for TLS required connections. (optional)
  - name: key_pem
    type: configopaque.String
    kind: string
    default: ""
    doc: |
      In memory PEM encoded TLS key to use for TLS required connections. (optional)
  - name: min_version
    kind: string
    default: ""
    doc: |
      MinVersion sets the minimum TLS version that is acceptable.
      If not set, TLS 1.2 will be used. (optional)
  - name: max_version
    kind: string
    default: ""
    doc: |
      MaxVersion sets the maximum TLS version that is acceptable.
      If not set, refer to crypto/tls for defaults. (optional)
  - name: cipher_suites
    type: '[]string'
    kind: slice
    doc: |
      CipherSuites is a list of TLS cipher suites that the TLS transport can use.
      If left blank, a safe default list is used.
      See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.
  - name: reload_interval
    type: time.Duration
    kind: int64
    doc: |
      ReloadInterval specifies the duration after which the certificate will be reloaded
      If not set, it will never be reloaded (optional)
  - name: client_ca_file
    kind: string
    default: ""
    doc: |
      Path to the TLS cert to use by the server to verify a client certificate. (optional)
      This sets the ClientCAs and ClientAuth to RequireAndVerifyClientCert in the TLSConfig. Please refer to
      https://godoc.org/crypto/tls#Config for more information. (optional)
  - name: client_ca_file_reload
    kind: bool
    default: false
    doc: |
      Reload the ClientCAs file when it is modified
      (optional, default false)
- name: add_attributes
  kind: bool
  default: false
- name: one_log_per_packet
  kind: bool
  default: false
- name: encoding
  kind: string
  default: utf-8
- name: multiline
  type: split.Config
  kind: struct
  doc: |
    Config is the configuration for a split func
  fields:
  - name: line_start_pattern
    kind: string
    default: ""
  - name: line_end_pattern
    kind: string
    default: ""
  - name: omit_pattern
    kind: bool
    default: false
- name: preserve_leading_whitespaces
  kind: bool
  default: false
- name: preserve_trailing_whitespaces
  kind: bool
  default: false
- name: splitfuncbuilder
  type: tcp.SplitFuncBuilder
  kind: func
- name: operators
  type: '[]operator.Config'
  kind: slice
  doc: |
    Config is the configuration of an operator
  fields:
  - name: builder
    type: operator.Builder
    kind: interface
- name: storage
  type: '*component.ID'
  kind: ptr
  doc: |
    ID represents the identity for a component. It combines two values:
    * type - the Type of the component.
    * name - the name of that component.
    The component ID (combination type + name) is unique for a given component.Kind.
- name: retry_on_failure
  type: consumerretry.Config
  kind: struct
  doc: |
    Config defines configuration for retrying batches in case of receiving a retryable error from a downstream
    consumer. If the retryable error doesn't provide a delay, exponential backoff is applied.
  fields:
  - name: enabled
    kind: bool
    default: false
    doc: |
      Enabled indicates whether to not retry sending logs in case of receiving a retryable error from a downstream
      consumer. Default is false.
  - name: initial_interval
    type: time.Duration
    kind: int64
    doc: |
      InitialInterval the time to wait after the first failure before retrying. Default value is 1 second.
  - name: max_interval
    type: time.Duration
    kind: int64
    doc: |
      MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between
      consecutive retries will always be `MaxInterval`. Default value is 30 seconds.
  - name: max_elapsed_time
    type: time.Duration
    kind: int64
    doc: |
      MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a logs batch to
      a downstream consumer. Once this value is reached, the data is discarded. It never stops if MaxElapsedTime == 0.
      Default value is 5 minutes.
